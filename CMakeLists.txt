#
# Project Properties
#
CMAKE_MINIMUM_REQUIRED (VERSION 2.6.2)
PROJECT (carrizo)
SET (APPLICATION_NAME "Carrizo Pathtracer")
SET (APPLICATION_CODENAME "${PROJECT_NAME}")
SET (APPLICATION_COPYRIGHT_YEARS "2014")
SET (APPLICATION_VERSION_MAJOR 0)
SET (APPLICATION_VERSION_MINOR 5)
SET (APPLICATION_VERSION_PATCH 0)
SET (APPLICATION_VERSION_TYPE SNAPSHOT)
SET (APPLICATION_VERSION_STRING "${APPLICATION_VERSION_MAJOR}.${APPLICATION_VERSION_MINOR}.${APPLICATION_VERSION_PATCH}-${APPLICATION_VERSION_TYPE}")
SET (APPLICATION_VENDOR_ID "com.williamg")
SET (APPLICATION_VENDOR_NAME "williamg")
SET (APPLICATION_ID "${APPLICATION_VENDOR_ID}.${PROJECT_NAME}")


if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
	add_definitions(-DUSEGCD)
endif()

#Credit to Matthias Vallentin on stackoverflow for this
if (${CMAKE_CXX_COMPILER_ID} MATCHES "GNU")
    execute_process(
        COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE GCC_VERSION)
    if (GCC_VERSION VERSION_GREATER 4.7 OR GCC_VERSION VERSION_EQUAL 4.7)
		add_definitions("-std=gnu++11")
	elseif (GCC_VERSION VERSION_GREATER 4.3 OR GCC_VERSION VERSION_EQUAL 4.3)
		add_definitions("-std=gnu++0x")
    else()
        message(FATAL_ERROR "${PROJECT_NAME} requires C++11 support.")
    endif ()
elseif(${CMAKE_CXX_COMPILER_ID} MATCHES "Clang")
	add_definitions("-std=c++11 -stdlib=libc++")
endif()

#
# Debugging Options
#
SET (CMAKE_VERBOSE_MAKEFILE 1) # Use 1 for debugging, 0 for release

#
# Project Output Paths
#
SET (MAINFOLDER ${PROJECT_SOURCE_DIR})
SET (EXECUTABLE_OUTPUT_PATH "${MAINFOLDER}/bin")
SET (LIBRARY_OUTPUT_PATH "${MAINFOLDER}/lib")

#
# Project Search Paths
#
LIST (APPEND CMAKE_PREFIX_PATH "${MAINFOLDER}")
LIST (APPEND CMAKE_PREFIX_PATH "${MAINFOLDER}/tools")
LIST (APPEND CMAKE_PREFIX_PATH "${MAINFOLDER}/contrib")
SET (CMAKE_MODULE_PATH "${MAINFOLDER}/tools/share/cmake")
INCLUDE_DIRECTORIES("${MAINFOLDER}/include")
INCLUDE_DIRECTORIES("${MAINFOLDER}/contrib")

#
# Locate Project Prerequisites 
#
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")

FIND_PACKAGE (X11 REQUIRED)
INCLUDE_DIRECTORIES(${X11_INCLUDE_DIRS})
INCLUDE_DIRECTORIES("/usr/X11R6/include")
LINK_DIRECTORIES(${X11_LIBRARY_DIRS})

FIND_PACKAGE(ASSIMP REQUIRED)
INCLUDE_DIRECTORIES(${ASSIMP_INCLUDE_DIRS})
LINK_DIRECTORIES(${ASSIMP_LIBRARY_DIRS})

FIND_PACKAGE(PNG REQUIRED)
INCLUDE_DIRECTORIES(${PNG_INCLUDE_DIRS})
LINK_DIRECTORIES(${PNG_LIBRARY_DIRS})

FIND_PACKAGE(Threads REQUIRED)

#
# Configure Files
#
FILE (GLOB_RECURSE CONFIGINCLUDE include/*.in.h.cmake)
FILE (GLOB_RECURSE CONFIGSRC src/*.in.h.cmake)
LIST (APPEND CONFIGINPUTS "${CONFIGINCLUDE}")
LIST (APPEND CONFIGINPUTS "${CONFIGSRC}")
FOREACH (CONFIGINPUT ${CONFIGINPUTS})
    STRING (REPLACE ".in.h.cmake" ".h" CONFIGOUTPUT "${CONFIGINPUT}")
    CONFIGURE_FILE ("${CONFIGINPUT}" "${CONFIGOUTPUT}")
ENDFOREACH (CONFIGINPUT ${CONFIGINPUTS})

ADD_SUBDIRECTORY(src)
